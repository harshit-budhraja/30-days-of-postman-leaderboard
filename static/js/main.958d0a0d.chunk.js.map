{"version":3,"sources":["Leaderboard.js","assets/images/postman.jpg","assets/images/badge.png","App.js","reportWebVitals.js","index.js"],"names":["REFRESH_INTERVAL","Leaderboard","props","fetchData","a","_","has","preFetch","axios","get","response","data","forEach","row","workspaceId","length","setState","rows","postFetch","state","this","refreshInterval","intervalId","setInterval","clearInterval","gridClassName","noembed","className","columns","field","headerName","description","width","tableColumnWidth","sortable","renderCell","params","value","filterable","disableColumnMenu","React","Component","App","handleFetchData","isFetchingData","handleDataFetched","logoClassNames","classNames","exact","path","Paper","elevation","src","logo","alt","target","href","rel","badge","language","text","codeBlock","theme","dracula","showLineNumbers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.958d0a0d.chunk.js","sourcesContent":["import React from \"react\";\nimport _ from 'lodash';\nimport { DataGrid } from '@material-ui/data-grid';\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\nimport axios from 'axios';\nimport './App.css';\n\n/**\n * Default Refresh Interval of 5 minutes\n */\nlet REFRESH_INTERVAL = 60 * 5;\n\n/**\n * Mock API Endpoint\n */\nconst baseUrl = 'https://88d3ce90-a071-4e4b-84bc-d4092d42c9e8.mock.pstmn.io/leaders';\n\nexport default class Leaderboard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows: []\n        };\n    }\n\n    fetchData = async () => {\n        try {\n            if (_.has(this.props, \"preFetch\")) {\n                this.props.preFetch();\n            }\n            const response = await axios.get(baseUrl);\n            let data = _.get(response.data, 'completions');\n            data.forEach(row => {\n                row['id'] = row.workspaceId;\n            });\n            if (data.length > 0) {\n                this.setState({ rows: data });\n            }\n            if (_.has(this.props, \"postFetch\")) {\n                this.props.postFetch();\n            }\n        } catch (error) {\n            throw error;\n        }\n    };\n\n    async componentDidMount() {\n        await this.fetchData();\n\n        if (_.has(this.props, \"refreshInterval\")) {\n            REFRESH_INTERVAL = this.props.refreshInterval;\n        }\n\n        this.intervalId = setInterval(() => {\n            this.fetchData();\n        }, 1000 * REFRESH_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n    render() {\n        const tableColumnWidth = 240;\n        const gridClassName = this.props.noembed ? \"App-datagrid\" : \"leaderboard-embed\";\n        return (\n            <div className={gridClassName}>\n                <DataGrid\n                    columns={[\n                        {\n                            field: 'name',\n                            headerName: 'Name',\n                            description: 'Name of the user who has completed the challenge',\n                            width: tableColumnWidth * 1.8,\n                            sortable: false\n                        },\n                        {\n                            field: 'status',\n                            headerName: 'Status',\n                            description: 'Status of the challenge',\n                            width: tableColumnWidth / 3,\n                            renderCell: (params) => {\n                                return params.value === \"approved\" ?\n                                    <VerifiedUserIcon className=\"verified-user-icon\" /> : params.value;\n                            },\n                            sortable: false,\n                            filterable: false,\n                            disableColumnMenu: true\n                        },\n                        {\n                            field: 'dateGranted',\n                            headerName: 'Date of Grant',\n                            description: 'Date on which the submission was approved',\n                            width: tableColumnWidth,\n                            sortable: false\n                        }\n                    ]}\n                    rows={this.state.rows}\n                />\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/postman.abad9016.jpg\";","export default __webpack_public_path__ + \"static/media/badge.cf91726a.png\";","import * as React from 'react';\nimport classNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport { CopyBlock, dracula } from \"react-code-blocks\";\nimport Leaderboard from './Leaderboard';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport logo from './assets/images/postman.jpg';\nimport badge from './assets/images/badge.png';\nimport './App.css';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetchingData: false\n        };\n    }\n\n    handleFetchData = () => {\n        this.setState({ isFetchingData: true });\n    }\n\n    handleDataFetched = () => {\n        this.setState({ isFetchingData: false });\n    }\n\n    render() {\n        const logoClassNames = classNames(\n            'App-logo',\n            { 'rotate': this.state.isFetchingData }\n        );\n        return (\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <div className=\"App\">\n                            <Paper className=\"App-header\" elevation={3}>\n                                <img className={logoClassNames} src={logo} alt='Postman Logo' />\n                                <div className=\"App-header-menu\">\n                                    <a className=\"App-header-menu-navbtn\" target=\"_self\" href=\"https://postman.com\">Home</a>\n                                    <a className=\"App-header-menu-navbtn not-first\" rel=\"noreferrer\" target=\"_blank\" href=\"https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/overview\">Challenge</a>\n                                </div>\n                            </Paper>\n                            <div className=\"App-content\">\n                                <div className=\"App-container\">\n                                    <img className=\"image-centre badge\" src={badge} alt=\"Challenge Badge\" />\n                                    <h2 className=\"App-container-title\">Leaderboard üèÜ</h2>\n                                    <p className=\"App-container-text\">\n                                        This is an unofficial leaderboard for the <strong>30 Days of Postman</strong> challenge üöÄ\n                                    </p>\n                                    <br/><br/>\n                                    <p>\n                                        It can also be embedded on HTML, Markdown etc. using the following iframe:\n                                        <br/><br/>\n                                        <CopyBlock\n                                            language=\"js\"\n                                            text={`<iframe\n    src=\"https://harshit-budhraja.github.io/30-days-of-postman-leaderboard/#/embed\"\n    title=\"Leaderboard Embed\"\n    width=\"800\"\n    height=\"500\"\n/>`                         }\n                                            codeBlock\n                                            theme={dracula}\n                                            showLineNumbers={false}\n                                        />\n                                    </p>\n                                </div>\n                                <Leaderboard noembed={true} preFetch={this.handleFetchData} postFetch={this.handleDataFetched} refreshInterval={60 * 2} />\n                            </div>\n                        </div>\n                    </Route>\n                    <Route exact path=\"/embed\">\n                        <Leaderboard />\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}